import { GeminiRequest, GeminiResponse } from '@/types'

const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent'

/**
 * Service pour interagir avec l'API Gemini de Google
 */
export class GeminiService {
  private apiKey: string

  constructor(apiKey?: string) {
    this.apiKey = apiKey || process.env.GEMINI_API_KEY || ''
    if (!this.apiKey) {
      throw new Error('Gemini API key is required')
    }
  }

  /**
   * Génère du contenu à partir d'un prompt
   */
  async generateContent(request: GeminiRequest): Promise<GeminiResponse> {
    try {
      const response = await fetch(GEMINI_API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-goog-api-key': this.apiKey,
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: this.buildPrompt(request)
            }]
          }],
          generationConfig: {
            maxOutputTokens: request.maxTokens || 2048,
            temperature: 0.7,
          }
        })
      })

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}))
        throw new Error(`Gemini API Error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`)
      }

      const data = await response.json()
      
      if (!data.candidates || !data.candidates[0]) {
        throw new Error('No content generated by Gemini')
      }

      return {
        content: data.candidates[0].content.parts[0].text,
        usage: data.usageMetadata ? {
          promptTokens: data.usageMetadata.promptTokenCount,
          completionTokens: data.usageMetadata.candidatesTokenCount,
          totalTokens: data.usageMetadata.totalTokenCount
        } : undefined
      }
    } catch (error) {
      console.error('Gemini Service Error:', error)
      throw error instanceof Error ? error : new Error('Unknown error occurred')
    }
  }

  /**
   * Construit le prompt pour améliorer un CV
   */
  async improveCVContent(rawContent: string, section: string): Promise<string> {
    const prompt = `En tant qu'expert en rédaction de CV, réécris le contenu suivant pour le rendre plus professionnel, percutant et adapté au marché du travail français.

Section: ${section}
Contenu original:
${rawContent}

Instructions:
- Utilise un langage professionnel et des verbes d'action
- Quantifie les résultats quand c'est possible
- Adapte le contenu aux standards français
- Garde la même structure mais améliore la formulation
- Sois concis et impactant

Contenu amélioré:`

    const response = await this.generateContent({ prompt })
    return response.content.trim()
  }

  /**
   * Génère une description professionnelle à partir de mots-clés
   */
  async generateFromKeywords(keywords: string[], jobTitle: string): Promise<string> {
    const prompt = `Génère une description professionnelle pour un poste de "${jobTitle}" en utilisant ces mots-clés:
${keywords.join(', ')}

La description doit être:
- Professionnelle et percutante
- Adaptée au marché français
- Entre 2-4 lignes
- Utiliser des verbes d'action
- Quantifier quand possible

Description:`

    const response = await this.generateContent({ prompt })
    return response.content.trim()
  }

  /**
   * Construit le prompt avec le contexte
   */
  private buildPrompt(request: GeminiRequest): string {
    let prompt = request.prompt
    
    if (request.context) {
      prompt = `Contexte: ${request.context}\n\n${prompt}`
    }
    
    return prompt
  }
}

// Instance par défaut
export const geminiService = new GeminiService()

// Helper pour les API routes
export const createGeminiService = (apiKey?: string) => {
  return new GeminiService(apiKey)
} 