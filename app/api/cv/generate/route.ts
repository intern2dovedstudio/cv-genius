import { NextRequest, NextResponse } from 'next/server'
import { CVFormData } from '@/types'
import { geminiService } from '@/lib/gemini/service'
import { cvPDFGenerator } from '@/lib/pdf/generator'

export const runtime = 'nodejs'

/**
 * API principale pour g√©n√©rer un CV am√©lior√©
 * FLOW COMPLET: JSON Form Data ‚Üí Am√©lioration Gemini ‚Üí PDF
 */
export async function POST(request: NextRequest) {
  console.log('üöÄ [CV Generator API] D√©but du flow de g√©n√©ration CV')
  
  try {
    // 1. R√©cup√©ration des donn√©es du formulaire
    const body = await request.json()
    const { cvData }: { cvData: CVFormData } = body
    
    if (!cvData) {
      console.error('‚ùå Aucune donn√©e CV fournie')
      return NextResponse.json(
        { success: false, error: 'Donn√©es CV requises' },
        { status: 400 }
      )
    }

    // 2. Validation des donn√©es essentielles
    if (!cvData.personalInfo?.name || !cvData.personalInfo?.email) {
      console.error('‚ùå Informations personnelles incompl√®tes')
      return NextResponse.json(
        { success: false, error: 'Nom et email requis' },
        { status: 400 }
      )
    }

    console.log('üìä Donn√©es CV re√ßues:', {
      personalInfo: Object.keys(cvData.personalInfo).length,
      experiences: cvData.experiences?.length || 0,
      education: cvData.education?.length || 0,
      skills: cvData.skills?.length || 0,
      languages: cvData.languages?.length || 0
    })

    // 3. Am√©lioration du CV avec Gemini
    console.log('ü§ñ Am√©lioration du CV avec Gemini...')
    let improvedCV: CVFormData
    
    try {
      improvedCV = await geminiService.improveCompleteCV(cvData)
      console.log('‚úÖ CV am√©lior√© par Gemini')
    } catch (geminiError) {
      console.error('‚ùå Erreur Gemini:', geminiError)
      // Fallback: utiliser les donn√©es originales si Gemini √©choue
      console.log('üîÑ Utilisation des donn√©es originales en fallback')
      improvedCV = cvData
    }

    // 4. G√©n√©ration du PDF
    console.log('üìÑ G√©n√©ration du PDF...')
    let pdfBuffer: Buffer
    
    try {
      pdfBuffer = await cvPDFGenerator.generatePDF(improvedCV)
      console.log(`‚úÖ PDF g√©n√©r√©: ${pdfBuffer.length} bytes`)
    } catch (pdfError) {
      console.error('‚ùå Erreur g√©n√©ration PDF:', pdfError)
      return NextResponse.json(
        { 
          success: false, 
          error: 'Erreur lors de la g√©n√©ration du PDF',
          details: pdfError instanceof Error ? pdfError.message : 'Erreur inconnue'
        },
        { status: 500 }
      )
    }

    // 5. Pr√©paration de la r√©ponse avec le PDF
    const fileName = cvPDFGenerator.generateFileName(improvedCV.personalInfo)
    
    console.log('‚úÖ CV g√©n√©r√© avec succ√®s!')
    console.log(`üìÅ Nom du fichier: ${fileName}`)

    // Retourne le PDF en tant que r√©ponse binaire
    return new NextResponse(pdfBuffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="${fileName}"`,
        'Content-Length': pdfBuffer.length.toString(),
        'X-CV-Improved': improvedCV !== cvData ? 'true' : 'false',
        'X-Generation-Timestamp': new Date().toISOString()
      }
    })

  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration du CV:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: 'Erreur interne lors de la g√©n√©ration du CV',
        details: error instanceof Error ? error.message : 'Erreur inconnue'
      },
      { status: 500 }
    )
  }
}

/**
 * Endpoint de test pour v√©rifier le bon fonctionnement
 */
export async function GET() {
  return NextResponse.json({
    message: 'CV Genius - API de g√©n√©ration CV',
    version: '1.0.0',
    status: 'active',
    flow: [
      '1. R√©ception des donn√©es CV (JSON)',
      '2. Am√©lioration avec Gemini AI',
      '3. G√©n√©ration PDF professionnel',
      '4. T√©l√©chargement automatique'
    ],
    requirements: [
      'personalInfo.name (requis)',
      'personalInfo.email (requis)',
      'GEMINI_API_KEY configur√©'
    ],
    timestamp: new Date().toISOString()
  })
} 