import { NextRequest, NextResponse } from 'next/server'
import { geminiService } from '@/lib/gemini/service'
import type { CVFormData } from '@/types'

/**
 * API pour am√©liorer un CV complet avec Gemini
 * Prend un CV JSON et retourne un CV am√©lior√© JSON
 */
export async function POST(request: NextRequest) {
  try {
    // 1. R√©cup√©ration des donn√©es du CV
    const body = await request.json()
        const { formData : cvData }: { formData: CVFormData } = body
    
    if (!cvData) {
      console.error('‚ùå Aucune donn√©e CV fournie')
      return NextResponse.json(
        { success: false, error: 'Donn√©es CV requises' },
        { status: 400 }
      )
    }

    // 2. Validation des donn√©es essentielles
    if (!cvData.personalInfo?.name || !cvData.personalInfo?.email) {
      console.error('‚ùå Informations personnelles incompl√®tes')
      return NextResponse.json(
        { success: false, error: 'Nom et email requis' },
        { status: 400 }
      )
    }

    console.log('üìä Donn√©es CV re√ßues pour am√©lioration:', {
      personalInfo: Object.keys(cvData.personalInfo).length,
      experiences: cvData.experiences?.length || 0,
      education: cvData.education?.length || 0,
      skills: cvData.skills?.length || 0,
      languages: cvData.languages?.length || 0
    })

    // 3. Am√©lioration du CV avec Gemini
    console.log('ü§ñ Am√©lioration du CV avec Gemini...')
    let improvedCV: CVFormData
    
    try {
      improvedCV = await geminiService.improveCompleteCV(cvData)
      console.log('‚úÖ CV am√©lior√© par Gemini avec succ√®s')
    } catch (geminiError) {
      console.error('‚ùå Erreur Gemini:', geminiError)
      return NextResponse.json(
        { 
          success: false, 
          error: 'Erreur lors de l\'am√©lioration du CV',
          details: geminiError instanceof Error ? geminiError.message : 'Erreur inconnue'
        },
        { status: 500 }
      )
    }

    // 4. Validation de la r√©ponse am√©lior√©e
    if (!improvedCV.personalInfo || !improvedCV.experiences || !improvedCV.education || !improvedCV.skills) {
      console.error('‚ùå Structure JSON invalide retourn√©e par Gemini')
      return NextResponse.json(
        { 
          success: false, 
          error: 'Structure JSON invalide retourn√©e par l\'IA'
        },
        { status: 500 }
      )
    }

    console.log('‚úÖ Am√©lioration termin√©e avec succ√®s!')
    console.log('üìä Donn√©es am√©lior√©es:', {
      personalInfo: Object.keys(improvedCV.personalInfo).length,
      experiences: improvedCV.experiences?.length || 0,
      education: improvedCV.education?.length || 0,
      skills: improvedCV.skills?.length || 0,
      languages: improvedCV.languages?.length || 0
    })

    // 5. Retourne le CV am√©lior√©
    return NextResponse.json({
      success: true,
      improvedCV,
      timestamp: new Date().toISOString(),
      source: 'cv-genius-gemini-improvement'
    })

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'am√©lioration du CV:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: 'Erreur interne lors de l\'am√©lioration du CV',
        details: error instanceof Error ? error.message : 'Erreur inconnue'
      },
      { status: 500 }
    )
  }
} 